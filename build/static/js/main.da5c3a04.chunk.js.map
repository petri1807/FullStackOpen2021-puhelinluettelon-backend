{"version":3,"sources":["components/AddForm.jsx","components/FilterForm.jsx","components/Persons.jsx","components/Notification.jsx","service/numbers.js","App.js","index.js"],"names":["AddForm","inputHandler","numberHandler","submitHandler","type","onChange","onClick","FilterForm","filterHandler","Persons","list","buttonHandler","map","person","name","number","id","styles","color","Notification","message","className","style","word","split","getStyles","baseUrl","numberService","getAll","axios","get","create","newObject","post","update","put","erase","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filterWord","setFilterWord","notification","setNotification","resetNotification","setTimeout","filterPhonebook","filter","toLowerCase","includes","useEffect","then","response","data","catch","error","console","log","event","target","value","preventDefault","find","window","confirm","updatedPerson","copy","newPerson","res","selectedPerson","p","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da5c3a04.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const AddForm = ({ inputHandler, numberHandler, submitHandler }) => {\r\n  return (\r\n    <form>\r\n      <h2>Add a new contact</h2>\r\n      <div>\r\n        name: <input type=\"text\" onChange={inputHandler} />\r\n      </div>\r\n      <div>\r\n        number: <input type=\"text\" onChange={numberHandler} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\" onClick={submitHandler}>\r\n          add\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const FilterForm = ({ filterHandler }) => (\r\n  <div>\r\n    filter shown with: <input type=\"text\" onChange={filterHandler} />\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nexport const Persons = ({ list, buttonHandler }) => {\r\n  return list.map((person) => (\r\n    <div key={person.name}>\r\n      {person.name}: {person.number}{' '}\r\n      <button onClick={() => buttonHandler(person.id)}>delete</button>\r\n    </div>\r\n  ));\r\n};\r\n","import React from 'react';\r\n\r\n// Basic styles live in index.css, color is chosen by message type\r\nconst styles = {\r\n  confirm: { color: 'green' },\r\n  erase: { color: 'purple' },\r\n  error: { color: 'red' },\r\n};\r\n\r\nexport const Notification = ({ message }) => {\r\n  if (!message) return null;\r\n\r\n  const getStyles = () => {\r\n    const word = message.split(' ')[0];\r\n    if (word === 'Added' || word === 'Updated') return styles.confirm;\r\n    if (word === 'Deleted') return styles.erase;\r\n    if (word === 'Error') return styles.error;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"notification\" style={getStyles()}>\r\n        {message}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject);\r\n};\r\n\r\nconst erase = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nconst numberService = {\r\n  getAll,\r\n  create,\r\n  update,\r\n  erase,\r\n};\r\n\r\nexport default numberService;\r\n","import React, { useState, useEffect } from 'react';\n\nimport { AddForm } from './components/AddForm';\nimport { FilterForm } from './components/FilterForm';\nimport { Persons } from './components/Persons';\nimport { Notification } from './components/Notification';\nimport numberService from './service/numbers';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filterWord, setFilterWord] = useState('');\n  const [notification, setNotification] = useState(null);\n\n  const inputHandler = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const numberHandler = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const filterHandler = (event) => {\n    setFilterWord(event.target.value);\n  };\n\n  const resetNotification = () => setTimeout(() => setNotification(null), 3000);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    // Replace old num with new num\n    if (persons.find((person) => person.name === newName)) {\n      const message = `${newName} is already added to phonebook, replace the old number with a new one?`;\n\n      if (window.confirm(message)) {\n        // initialize the values passed to server\n        let id = -1;\n        let updatedPerson = { name: 'None', number: 'None' };\n\n        // Create a new updated array for hook and update initial values for server call\n        const copy = persons.map((person) => {\n          if (person.name === newName) {\n            id = person.id;\n            updatedPerson = { ...person, number: newNumber };\n            return updatedPerson;\n          }\n          return person;\n        });\n\n        numberService\n          .update(id, updatedPerson)\n          .then((response) => {\n            setPersons(copy);\n            setNotification(`Updated ${updatedPerson.name}`);\n            resetNotification();\n          })\n          .catch((error) => {\n            setNotification(\n              `Error happened: Information of ${updatedPerson.name} has already been removed from the server`\n            );\n            resetNotification();\n          });\n      }\n\n      // exits handler function before creating a new person\n      return;\n    }\n\n    // Create a new contact\n    const newPerson = { name: newName, number: newNumber };\n    numberService\n      .create(newPerson)\n      .then((res) => {\n        setPersons([...persons, newPerson]);\n        setNotification(`Added ${newPerson.name}`);\n        resetNotification();\n      })\n      .catch((error) => {\n        setNotification(`Error happened: ${error}`);\n        resetNotification();\n      });\n  };\n\n  const deleteHandler = (id) => {\n    const selectedPerson = persons.find((p) => p.id === id).name;\n    const message = `Haluatko poistaa numeron ${selectedPerson}`;\n\n    if (window.confirm(message)) {\n      numberService\n        .erase(id)\n        .then((res) => {\n          setPersons(persons.filter((item) => item.id !== id));\n          setNotification(`Deleted ${selectedPerson}`);\n          resetNotification();\n        })\n        .catch((error) => {\n          setNotification(`Error happened: ${error}`);\n          resetNotification();\n        });\n    }\n  };\n\n  const filterPhonebook = persons.filter((person) => {\n    return person.name.toLowerCase().includes(filterWord.toLowerCase())\n      ? true\n      : false;\n  });\n\n  useEffect(() => {\n    numberService\n      .getAll()\n      .then((response) => setPersons(response.data))\n      .catch((error) => console.log(error));\n  }, []);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={notification} />\n      <FilterForm filterHandler={filterHandler} />\n      <AddForm\n        inputHandler={inputHandler}\n        numberHandler={numberHandler}\n        submitHandler={submitHandler}\n      />\n      <h2>Numbers</h2>\n      <Persons list={filterPhonebook} buttonHandler={deleteHandler} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}